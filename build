#!/usr/bin/env python3

import subprocess
import re
import sys
import platform
import os
import argparse
import shutil
import tempfile

TOOL_VERSION = "1.0.0.0"  # This is the version of the *build tool itself*, not your repo version, Major.Minor.Patch.Build
DEFAULT_BRANCH = "main"  # Update if your default branch is different
GITHUB_REPO = "yourusername/BuildTool"  # Change this to your GitHub username and repo name

def run_command(cmd):
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"‚ùå Error running command: {cmd}\n{result.stderr}")
        exit(1)
    return result.stdout.strip()

def get_latest_tag():
    tags = run_command("git tag --sort=-v:refname").split("\n")
    tags = [tag for tag in tags if tag.startswith('v')]
    return tags[0] if tags else None

def get_commit_tag():
    tag = run_command("git describe --tags --exact-match HEAD 2>/dev/null || true").strip()
    return tag if tag else None

def bump_patch_version(current_version):
    major, minor, patch, build = map(int, current_version[1:].split('.'))
    build += 1  # Increment the build version
    return f"v{major}.{minor}.{patch}.{build}"

def parse_version(tag):
    match = re.match(r"v(\d+)\.(\d+)\.(\d+)\.(\d+)", tag)
    if match:
        major, minor, patch, build = map(int, match.groups())
        return major, minor, patch, build
    else:
        print(f"‚ùå Invalid tag format: {tag}")
        exit(1)

def is_version_higher(new_version, current_version):
    new_m, new_n, new_p, _ = parse_version(new_version)
    cur_m, cur_n, cur_p, _ = parse_version(current_version)
    
    if new_m > cur_m:
        return True
    if new_m == cur_m and new_n > cur_n:
        return True
    if new_m == cur_m and new_n == cur_n and new_p > cur_p:
        return True
    return False

def get_latest_build_tag():
    latest_tag = get_latest_tag()
    if latest_tag:
        print(f"Current version: {latest_tag}")
        return latest_tag
    else:
        print("No version tags found")
        return None

def update_build_tool():
    """Update the build tool by downloading the latest version from GitHub"""
    print("üîÑ Updating build tool...")
    try:
        # Create a temporary directory
        with tempfile.TemporaryDirectory() as temp_dir:
            os.chdir(temp_dir)
            
            # Download the latest version
            raw_url = f"https://raw.githubusercontent.com/{GITHUB_REPO}/main/build"
            if platform.system() == "Windows":
                run_command(f'powershell -Command "Invoke-WebRequest -Uri {raw_url} -OutFile build.py"')
            else:
                run_command(f'curl -sSL {raw_url} -o build.py')
            
            # Make it executable
            if platform.system() != "Windows":
                run_command('chmod +x build.py')
            
            # Install the updated version
            bin_path = "/usr/local/bin/build" if platform.system() != "Windows" else os.path.join(os.environ.get('LOCALAPPDATA'), 'build.py')
            shutil.copy2('build.py', bin_path)
            
            if platform.system() != "Windows":
                run_command(f"chmod +x {bin_path}")
            
            print("‚úÖ Build tool updated successfully to the latest version.")
    except Exception as e:
        print(f"‚ùå Failed to update build tool: {e}")
        print("Try running with sudo: sudo build update")

def install_build_tool():
    """Install the build tool to make it available as a command"""
    script_path = os.path.abspath(__file__)
    
    if platform.system() == "Windows":
        bin_path = os.path.join(os.environ.get('LOCALAPPDATA'), 'build.py')
        try:
            shutil.copy2(script_path, bin_path)
            # Add the directory to PATH if it's not already there
            print("‚úÖ Build tool installed successfully.")
            print("Make sure your PATH includes the LocalAppData directory.")
        except Exception as e:
            print(f"‚ùå Failed to install build tool: {e}")
            print("Try running as administrator.")
    else:
        bin_path = "/usr/local/bin/build"
        try:
            shutil.copy2(script_path, bin_path)
            run_command(f"chmod +x {bin_path}")
            print("‚úÖ Build tool installed successfully. You can now use 'build' command from anywhere.")
        except Exception as e:
            print(f"‚ùå Failed to install build tool: {e}")
            print("Try running with sudo: sudo build install")

def direct_install():
    """Save script to a temporary file and then install it"""
    temp_path = f"/tmp/build_tool_{os.getpid()}"
    try:
        # Save the script to a temporary file
        with open(temp_path, 'w') as f:
            f.write(open(__file__).read())
        os.chmod(temp_path, 0o755)
        
        # Install from the temporary file
        if platform.system() == "Windows":
            bin_path = os.path.join(os.environ.get('LOCALAPPDATA'), 'build.py')
        else:
            bin_path = "/usr/local/bin/build"
            
        shutil.copy2(temp_path, bin_path)
        
        if platform.system() != "Windows":
            run_command(f"chmod +x {bin_path}")
            
        os.remove(temp_path)
        print("‚úÖ Build tool installed successfully. You can now use 'build' command from anywhere.")
    except Exception as e:
        print(f"‚ùå Failed to install build tool: {e}")
        if platform.system() == "Windows":
            print("Try running as administrator.")
        else:
            print("Try running with sudo: sudo curl -sSL [URL] | python3 - install")

def main():
    # Check if being run as a piped install
    if len(sys.argv) > 1 and sys.argv[1] == 'install' and not os.path.isfile(__file__):
        direct_install()
        return
        
    parser = argparse.ArgumentParser(description="Build tool for version management")
    parser.add_argument('-v', '--version', action='store_true', help='Show build tool version')
    parser.add_argument('command', nargs='?', default=None, help='Command to execute (build, version, update, install)')
    parser.add_argument('-o', '--override', action='store_true', help='Override version checks')
    parser.add_argument('custom_version', nargs='?', default=None, help='Set custom version (major.minor.patch)')
    
    args = parser.parse_args()

    if args.version:
        print(f"Build Tool version {TOOL_VERSION}")
        return
    
    if args.command == 'version':
        get_latest_build_tag()
        return
    
    if args.command == 'update':
        update_build_tool()
        return
        
    if args.command == 'install':
        install_build_tool()
        return

    # If no arguments or 'build' command, proceed with version management
    latest_tag = get_latest_tag()

    if latest_tag is None:
        new_version = "v1.0.0.0"
        print(f"üî® No existing tags. Starting at {new_version}")
    else:
        print(f"üîñ Latest version is {latest_tag}")

        current_commit_tag = get_commit_tag()

        if current_commit_tag:
            print(f"‚úÖ Current commit already tagged as: {current_commit_tag}")
            new_version = current_commit_tag
        else:
            if args.custom_version:
                # User specified a custom version
                custom_ver = args.custom_version
                if not custom_ver.startswith('v'):
                    custom_ver = f"v{custom_ver}.0"  # Add v prefix and .0 for build
                elif '.' not in custom_ver[1:]:
                    custom_ver = f"{custom_ver}.0"  # Add .0 for build
                
                # Check if version format is correct
                try:
                    major, minor, patch, build = parse_version(custom_ver)
                    new_version = f"v{major}.{minor}.{patch}.{build}"
                    
                    # Check if version is higher than latest unless override is set
                    if not args.override and not is_version_higher(new_version, latest_tag):
                        print(f"‚ùå New version {new_version} is not higher than latest version {latest_tag}")
                        print("Use -o/--override to force this version")
                        exit(1)
                except:
                    print(f"‚ùå Invalid version format: {custom_ver}")
                    print("Format should be: major.minor.patch")
                    exit(1)
            else:
                new_version = bump_patch_version(latest_tag)
                print(f"üîº No tag found on latest commit. Auto-bumping to {new_version}")

        unpushed_tags = run_command("git tag --points-at HEAD").split("\n")
        unpushed_tags = [tag for tag in unpushed_tags if tag.startswith('v')]

        if unpushed_tags and not args.custom_version:
            latest_major, latest_minor, latest_patch, _ = parse_version(latest_tag)
            for tag in unpushed_tags:
                major, minor, patch, build = parse_version(tag)
                if not args.override and ((major < latest_major) or 
                   (major == latest_major and minor < latest_minor) or
                   (major == latest_major and minor == latest_minor and patch < latest_patch)):
                    print(f"‚ùå New tag {tag} is lower than latest tag {latest_tag}")
                    print("Use -o/--override to force this version")
                    exit(1)

    # Prompt for confirmation before applying tag and pushing
    confirmation = input(f"‚úÖ Ready to tag as {new_version} and push. Continue? (y/n): ")
    if confirmation.lower() != 'y':
        print("Operation canceled by user")
        exit(0)

    # Create and push the tag
    run_command(f'git tag {new_version}')
    run_command(f'git push origin {new_version}')
    print(f"üöÄ Successfully tagged and pushed {new_version}")

if __name__ == "__main__":
    main()