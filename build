#!/usr/bin/env python3

import subprocess
import re
import sys

TOOL_VERSION = "1.0.0"  # This is the version of the *build tool itself*, not your repo version

DEFAULT_BRANCH = "main"  # Update if your default branch is different

def run_command(cmd):
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"❌ Error running command: {cmd}\n{result.stderr}")
        exit(1)
    return result.stdout.strip()

def get_latest_tag():
    tags = run_command("git tag --sort=-v:refname").split("\n")
    tags = [tag for tag in tags if tag.startswith('v')]
    return tags[0] if tags else None

def get_commit_tag():
    tag = run_command("git describe --tags --exact-match HEAD 2>/dev/null || true").strip()
    return tag if tag else None

def bump_patch_version(current_version):
    major, minor, patch = map(int, current_version[1:].split('.'))
    patch += 1
    return f"v{major}.{minor}.{patch}"

def parse_version(tag):
    match = re.match(r"v(\d+)\.(\d+)\.(\d+)", tag)
    if match:
        major, minor, patch = map(int, match.groups())
        return major, minor, patch
    else:
        print(f"❌ Invalid tag format: {tag}")
        exit(1)

def main():
    if len(sys.argv) > 1 and sys.argv[1] in ['-v', '--version', '-version']:
        print(f"Build Tool version {TOOL_VERSION}")
        return

    latest_tag = get_latest_tag()

    if latest_tag is None:
        new_version = "v1.0.0"
        print(f"🔨 No existing tags. Starting at {new_version}")
    else:
        print(f"🔖 Latest version is {latest_tag}")

        current_commit_tag = get_commit_tag()

        if current_commit_tag:
            print(f"✅ Current commit already tagged as: {current_commit_tag}")
            new_version = current_commit_tag
        else:
            new_version = bump_patch_version(latest_tag)
            print(f"🔼 No tag found on latest commit. Auto-bumping to {new_version}")

        unpushed_tags = run_command("git tag --points-at HEAD").split("\n")
        unpushed_tags = [tag for tag in unpushed_tags if tag.startswith('v')]

        if unpushed_tags:
            latest_major, latest_minor, _ = parse_version(latest_tag)
            for tag in unpushed_tags:
                major, minor, patch = parse_version(tag)
                if (major < latest_major) or (major == latest_major and minor <= latest_minor):
                    print(f"❌ New tag {tag} has major.minor ({major}.{minor}) <= latest tag {latest_tag}. Aborting.")
                    exit(1)
                else:
                    print(f"✅ User-provided tag {tag} is valid.")
                    new_version = tag
                    break

    print(f"🏷️ Final version: {new_version}")

    run_command(f'git tag -f {new_version}')
    run_command(f'git push origin {DEFAULT_BRANCH}')
    run_command(f'git push origin {new_version}')

    print(f"✅ Version {new_version} pushed to {DEFAULT_BRANCH} and remote.")

if __name__ == "__main__":
    main()